@startuml

hide circle
skinparam classAttributeIconSize 0

Event "*"-> "*" Tag
Event -right|> "{abstract} \n TaggableObject"
Timetable --> "*" Event
"{abstract} \n TaggableObject" "*" --> "*" Tag

"{abstract} \n RecurringEvent" --|> Event
DailyEvent --|> "{abstract} \n RecurringEvent"
WeeklyEvent --|> "{abstract} \n RecurringEvent"
MonthlyEvent --|> "{abstract} \n RecurringEvent"
YearlyEvent --|> "{abstract} \n RecurringEvent"

class Timetable {
-events: <ArrayList<Event>
-nonRecurringEvents: <ArrayList<Event>
-dailyEvents: <ArrayList<Event>
-weeklyEvents: <ArrayList<Event>
-yearlyEvents: <ArrayList<Event>
+getEvents(): ArrayList<Event>
+getEvent(int): Event
+setEvents(ArrayList<Event>): void
+setEvent(int, Event): void
+addEvent(Event): void
+addEvent(int, Event): void
+deleteEvent(int): void
+getDailyEvents(): ArrayList<Event>
+getAllNonRecurringEvents(): ArrayList<Event>
+getAllRecurringEventsArray(): ArrayList<Event>
+getYearTimetable(int): HashMap<Month, HashMap<Integer, ArrayList<Event>>>
+getMonthTimetable(int, int): HashMap<Month, HashMap<Integer, ArrayList<Event>>>
+getTimetable(LocalDate, LocalDate): HashMap<Month, HashMap<Integer, ArrayList<Event>>>
+getAllEvents(LocalDate, LocalDate): ArrayList<Event>
-getNonRecurringEvents(LocalDate, LocalDate, ArrayList<Event>): ArrayList<Event>
-getRecurringEvents(LocalDate, LocalDate, ArrayList<? extends RecurringEvent>: ArrayList<Event>
-getAllRecurringEvents(LocalDate, LocalDate, ArrayList<? extends RecurringEvent>: ArrayList<Event>
-getEventSetReminder(ArrayList<Event>): PriorityQueue<Reminder>
+getReminders(): ArrayList<Reminder>
+getClashingEvents(Event): ArrayList<Event>
}

class Event {
+REMINDER_DAY: String
+REMINDER_WEEK: String
-title: String
-startDateTime: LocalDateTime
-endDateTime: LocalDateTime
-isToRemind: Boolean
-isRecurring: boolean
-reminderPeriods: HashMap<String, ArrayList<Integer>>
+getTitle(): String
+setTitle(String): void
+getStartDateTime(): LocalDateTime
+setStartDateTime(LocalDateTime): void
+getStartDate(): LocalDate
+getStartTime(): LocalTime
+getEndDateTime(): LocalDateTime
+setEndDateTime(LocalDateTime): void
+getEndDate(): LocalDate
+getEndTime(): LocalTime
-getLocalDateTimeStringRep(LocalDateTime): String
+getStartDateTimeString(): String
+getEndDateTimeString(): String
+getIsToRemind(): boolean
+setIsToRemind(boolean): void
+getReminderPeriods(): HashMap<String, ArrayList<Integer>>
+setReminderPeriods(HashMap<String, ArrayList<Integer>>): void
+getReminderPeriodsString(): ArrayList<String>
+getRecurring(): boolean
+hasSameStartEndDateDate(): boolean
+getEventLengthInMinutes(): int
+getReminderDates(): ArrayList<LocalDate>
+occursDuringEvent(Event): boolean
-checkClash(LocalDateTime, LocalDateTime, LocalDateTime)
+toReminderString(): String
+toString(): String
+compareTo(Event): int
+equals(Object): boolean
}

class "{abstract} \n RecurringEvent" {
+DEFAULT_END_RECURRENCE: LocalDate
+DEFAULT_END_RECURRENCE_TIME: LocalTime
+NO_RECURRENCE_TYPE: String
+DAILY_RECURRENCE_TYPE: String
+WEEKLY_RECURRENCE_TYPE: String
+MONTHLY_RECURRENCE_TYPE: String
+YEARLY_RECURRENCE_TYPE: String
-endRecurrenceDate: LocalDate
-endRecurrenceTime: LocalTime
-recurrenceType: String
+getRecurrenceType(): String
+getEndRecurrenceDate(): LocalDate
+setEndRecurrenceDate(LocalDate): void
+getEndRecurrenceDateTime(): String
+checkAfterEndRecurrence(LocalDate): boolean
+getRecurrences(LocalDate, LocalDate): ArrayList<Event>
+toReoccur(LocalDate): boolean
+getEndRecurrenceString(): String
+timeStep(LocalDate): LocalDate {abstract}
+timeStep(LocalDate, int): LocalDate {abstract}
}

class DailyEvent {
-TIME_STEP:int
+timeStep(LocalDate): LocalDate
+timeStep(LocalDate, int): LocalDate
}

class WeeklyEvent {
-TIME_STEP:int
+timeStep(LocalDate): LocalDate
+timeStep(LocalDate, int): LocalDate
}

class MonthlyEvent {
-TIME_STEP:int
+timeStep(LocalDate): LocalDate
+timeStep(LocalDate, int): LocalDate
}

class YearlyEvent {
-TIME_STEP:int
+timeStep(LocalDate): LocalDate
+timeStep(LocalDate, int): LocalDate
}

class "{abstract} \n TaggableObject" {
-tags: ArrayList<Tag>
+getTagsName(): String
}

@enduml
